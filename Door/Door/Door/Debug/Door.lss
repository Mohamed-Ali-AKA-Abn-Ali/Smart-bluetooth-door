
Door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d9  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000111  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
#define BAUD_RATE 9600 // Define the desired baud rate
#define BAUD_PRESCALER ((F_CPU / (BAUD_RATE * 16UL)) - 1) // Calculate baud rate prescaler value

void USART_Init(unsigned int baud_prescaler) {
	
	UBRRH = (baud_prescaler >> 8); // Load upper 8 bits of the baud rate value into the UBRRH register
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL = baud_prescaler; // Load lower 8 bits of the baud rate value into the UBRRL register
  6e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN); // Enable receiver and transmitter
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Set frame format: 8 data bits, 1 stop bit, no parity
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	08 95       	ret

0000007a <USART_ReadChar>:
}

unsigned char USART_ReadChar() {
	while ((UCSRA & (1 << RXC))==0); // Wait until data is received
  7a:	5f 9b       	sbis	0x0b, 7	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_ReadChar>
	return UDR; // Return received data
  7e:	8c b1       	in	r24, 0x0c	; 12
}
  80:	08 95       	ret

00000082 <main>:
	UDR=byte; // Return received data
}*/


int main(void) {
	USART_Init(BAUD_PRESCALER); // Initialize USART with the calculated baud rate prescaler value
  82:	83 e3       	ldi	r24, 0x33	; 51
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	unsigned char received_char;
	DDRA=0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
  8e:	84 bb       	out	0x14, r24	; 20
	DDRB  &= ~(1<<PORTB0);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	8e 7f       	andi	r24, 0xFE	; 254
  94:	87 bb       	out	0x17, r24	; 23
	
	while (1) { // Infinite loop
		//USART_SendChar('A');
		//USART_SendChar('B');
		if (PINB & (1 << PORTB0)) {
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	0f c0       	rjmp	.+30     	; 0xb8 <main+0x36>
			 PORTC |= (1 << PORTC0);
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	31 e1       	ldi	r19, 0x11	; 17
  a4:	8a e7       	ldi	r24, 0x7A	; 122
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2e>
  b0:	00 00       	nop
			_delay_ms(5000);
			PORTC &= ~(1 << PORTC0);
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	85 bb       	out	0x15, r24	; 21
		}
		received_char=USART_ReadChar();
  b8:	0e 94 3d 00 	call	0x7a	; 0x7a <USART_ReadChar>
		
		if((received_char=='A')||(received_char=='a')){
  bc:	81 34       	cpi	r24, 0x41	; 65
  be:	11 f0       	breq	.+4      	; 0xc4 <main+0x42>
  c0:	81 36       	cpi	r24, 0x61	; 97
  c2:	79 f4       	brne	.+30     	; 0xe2 <main+0x60>
			PORTA=0b10100101;// portA for motors
  c4:	95 ea       	ldi	r25, 0xA5	; 165
  c6:	9b bb       	out	0x1b, r25	; 27
			PORTC=0x0F;//portC for leds
  c8:	9f e0       	ldi	r25, 0x0F	; 15
  ca:	95 bb       	out	0x15, r25	; 21
  cc:	9f ef       	ldi	r25, 0xFF	; 255
  ce:	21 e1       	ldi	r18, 0x11	; 17
  d0:	3a e7       	ldi	r19, 0x7A	; 122
  d2:	91 50       	subi	r25, 0x01	; 1
  d4:	20 40       	sbci	r18, 0x00	; 0
  d6:	30 40       	sbci	r19, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x50>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5a>
  dc:	00 00       	nop
			_delay_ms(5000);
			PORTA=0x00;
  de:	1b ba       	out	0x1b, r1	; 27
			PORTC=0x00;
  e0:	15 ba       	out	0x15, r1	; 21

		}
		if ((received_char=='B')||(received_char=='b'))
  e2:	82 34       	cpi	r24, 0x42	; 66
  e4:	11 f0       	breq	.+4      	; 0xea <main+0x68>
  e6:	82 36       	cpi	r24, 0x62	; 98
  e8:	b1 f6       	brne	.-84     	; 0x96 <main+0x14>
		{	
			PORTA=0b01011010;// portA for motors
  ea:	8a e5       	ldi	r24, 0x5A	; 90
  ec:	8b bb       	out	0x1b, r24	; 27
			PORTC=0xF0;//portC for leds
  ee:	80 ef       	ldi	r24, 0xF0	; 240
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	91 e1       	ldi	r25, 0x11	; 17
  f6:	2a e7       	ldi	r18, 0x7A	; 122
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	20 40       	sbci	r18, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x76>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x80>
 102:	00 00       	nop
			_delay_ms(5000);
			PORTA=0x00;
 104:	1b ba       	out	0x1b, r1	; 27
			PORTC=0x00;
 106:	15 ba       	out	0x15, r1	; 21
 108:	c6 cf       	rjmp	.-116    	; 0x96 <main+0x14>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
