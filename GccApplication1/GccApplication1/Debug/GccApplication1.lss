
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000658  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000599  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000378  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016d  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_13>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	95 00       	.word	0x0095	; ????
  56:	c0 00       	.word	0x00c0	; ????
  58:	77 00       	.word	0x0077	; ????
  5a:	c0 00       	.word	0x00c0	; ????
  5c:	88 00       	.word	0x0088	; ????
  5e:	c0 00       	.word	0x00c0	; ????
  60:	c0 00       	.word	0x00c0	; ????
  62:	c0 00       	.word	0x00c0	; ????
  64:	c0 00       	.word	0x00c0	; ????
  66:	c0 00       	.word	0x00c0	; ????
  68:	ac 00       	.word	0x00ac	; ????
  6a:	c0 00       	.word	0x00c0	; ????
  6c:	c0 00       	.word	0x00c0	; ????
  6e:	c0 00       	.word	0x00c0	; ????
  70:	c0 00       	.word	0x00c0	; ????
  72:	c0 00       	.word	0x00c0	; ????
  74:	a2 00       	.word	0x00a2	; ????
  76:	b6 00       	.word	0x00b6	; ????
  78:	c0 00       	.word	0x00c0	; ????
  7a:	63 00       	.word	0x0063	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <__vector_13>:
#define MYUBRR F_CPU/16/BAUD-1 //asynchronous Normal mode in USART

//Serial com. Interrupt Service Routine (runs each time byte is received)

ISR(USART_RXC_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	char ReceivedByte;
	ReceivedByte = UDR; //Retrieves byte from serial port (blue tooth module)
  aa:	ec b1       	in	r30, 0x0c	; 12

	switch (ReceivedByte) //which ASCII character was received
  ac:	8e 2f       	mov	r24, r30
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	e2 54       	subi	r30, 0x42	; 66
  b4:	f1 09       	sbc	r31, r1
  b6:	e4 31       	cpi	r30, 0x14	; 20
  b8:	f1 05       	cpc	r31, r1
  ba:	08 f0       	brcs	.+2      	; 0xbe <__vector_13+0x2a>
  bc:	61 c0       	rjmp	.+194    	; 0x180 <__vector_13+0xec>
  be:	e6 5d       	subi	r30, 0xD6	; 214
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__tablejump2__>
	{
		case 'U':

		if(OCR0 <= 255)
  c6:	8c b7       	in	r24, 0x3c	; 60
		OCR0 += 10;
  c8:	8c b7       	in	r24, 0x3c	; 60
  ca:	86 5f       	subi	r24, 0xF6	; 246
  cc:	8c bf       	out	0x3c, r24	; 60

		PORTB&=~(1<<PB5); // RED-LED is off
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	88 bb       	out	0x18, r24	; 24

		PORTB|=(1<<PB7);
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8b e7       	ldi	r24, 0x7B	; 123
  dc:	92 e9       	ldi	r25, 0x92	; 146
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <__vector_13+0x4a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__vector_13+0x50>
  e4:	00 00       	nop

		_delay_ms(150);

		PORTB&=~(1<<PB7);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	88 bb       	out	0x18, r24	; 24

		break; //Increase PWM duty cycle by 10
  ec:	49 c0       	rjmp	.+146    	; 0x180 <__vector_13+0xec>

		case 'D':

		if(OCR0 >=0 )
  ee:	8c b7       	in	r24, 0x3c	; 60

		OCR0 -= 10;
  f0:	8c b7       	in	r24, 0x3c	; 60
  f2:	8a 50       	subi	r24, 0x0A	; 10
  f4:	8c bf       	out	0x3c, r24	; 60

		PORTB|=(1<<PB6); //turn on yellow led
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	8b e7       	ldi	r24, 0x7B	; 123
  fe:	92 e9       	ldi	r25, 0x92	; 146
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <__vector_13+0x6c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_13+0x72>
 106:	00 00       	nop

		_delay_ms(150);

		PORTB&=~(1<<PB6);// turn off yellow led
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	88 bb       	out	0x18, r24	; 24
		break; //Decrease PM duty cycle by 10
 10e:	38 c0       	rjmp	.+112    	; 0x180 <__vector_13+0xec>
		
		case 'F':

		PORTB&=~(1<<PB1); //clear Dir-pins
 110:	88 b3       	in	r24, 0x18	; 24
 112:	8d 7f       	andi	r24, 0xFD	; 253
 114:	88 bb       	out	0x18, r24	; 24

		PORTA&=~(1<<PA1); // clear Dir-pins
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	8b bb       	out	0x1b, r24	; 27

		PORTB|=(1<<PB0); //in1 =1
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	88 bb       	out	0x18, r24	; 24

		PORTA|=(1<<PA0);//in3-1
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	81 60       	ori	r24, 0x01	; 1
 126:	8b bb       	out	0x1b, r24	; 27

		break; //Change motor direction to be Forward
 128:	2b c0       	rjmp	.+86     	; 0x180 <__vector_13+0xec>

		case 'B':

		PORTB&=~(1<<PB0); //clear Dir-pins
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	88 bb       	out	0x18, r24	; 24

		PORTA&=~(1<<PA0); // clear Dir-pins
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	8b bb       	out	0x1b, r24	; 27

		PORTB|=(1<<PB1); //in2 =1
 136:	88 b3       	in	r24, 0x18	; 24
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	88 bb       	out	0x18, r24	; 24

		PORTA|=(1<<PA1);//in4=1
 13c:	8b b3       	in	r24, 0x1b	; 27
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	8b bb       	out	0x1b, r24	; 27

		break; //Change motor direction to Backward
 142:	1e c0       	rjmp	.+60     	; 0x180 <__vector_13+0xec>

		case 'R':
		
		PORTB &=~(1<<PB0)&~(1<<PB1); //clear Dir-pins
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8c 7f       	andi	r24, 0xFC	; 252
 148:	88 bb       	out	0x18, r24	; 24

		PORTA&=~(1<<PA0)&~(1<<PA1); // clear Dir-pins
 14a:	8b b3       	in	r24, 0x1b	; 27
 14c:	8c 7f       	andi	r24, 0xFC	; 252
 14e:	8b bb       	out	0x1b, r24	; 27

		PORTB|=(1<<PB0); //in1 =1
 150:	88 b3       	in	r24, 0x18	; 24
 152:	81 60       	ori	r24, 0x01	; 1
 154:	88 bb       	out	0x18, r24	; 24

		break;// Change motor direction to Right
 156:	14 c0       	rjmp	.+40     	; 0x180 <__vector_13+0xec>
		
		case 'L':
		
		PORTB&=~(1<<PB0)&~(1<<PB1); //clear Dir-pins
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	8c 7f       	andi	r24, 0xFC	; 252
 15c:	88 bb       	out	0x18, r24	; 24

		PORTA&=~(1<<PA0)&~(1<<PA1); // clear Dir-pins
 15e:	8b b3       	in	r24, 0x1b	; 27
 160:	8c 7f       	andi	r24, 0xFC	; 252
 162:	8b bb       	out	0x1b, r24	; 27

		PORTA|=(1<<PA0); //in1 =1
 164:	8b b3       	in	r24, 0x1b	; 27
 166:	81 60       	ori	r24, 0x01	; 1
 168:	8b bb       	out	0x1b, r24	; 27

		break;// Change motor direction to Right
 16a:	0a c0       	rjmp	.+20     	; 0x180 <__vector_13+0xec>
		
		case 'S':

		PORTB|= 0b11; //in1 ,in2=1
 16c:	88 b3       	in	r24, 0x18	; 24
 16e:	83 60       	ori	r24, 0x03	; 3
 170:	88 bb       	out	0x18, r24	; 24

		PORTA|=0b11; //in3, in4=1
 172:	8b b3       	in	r24, 0x1b	; 27
 174:	83 60       	ori	r24, 0x03	; 3
 176:	8b bb       	out	0x1b, r24	; 27

		OCR0 = 0;
 178:	1c be       	out	0x3c, r1	; 60

		PORTB|=(1<<PB5);// RED-LED WILL TURN ON
 17a:	88 b3       	in	r24, 0x18	; 24
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	88 bb       	out	0x18, r24	; 24
		break; //STOP motor by raising both direction inputs, PM duty cycle 0%

		default:
		break;//character unknown to my routine,discard character
	}
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:

int main(void)
{
	//I/O Initialization

	DDRB|= (1<<PB0) | (1<<PB1) | (1<<PB2)| (1<<PB3)| (1<<PB5)| (1<<PB6)| (1<<PB7);
 196:	87 b3       	in	r24, 0x17	; 23
 198:	8f 6e       	ori	r24, 0xEF	; 239
 19a:	87 bb       	out	0x17, r24	; 23
	DDRA|=(1<<PA0)|(1<<PA1);
 19c:	8a b3       	in	r24, 0x1a	; 26
 19e:	83 60       	ori	r24, 0x03	; 3
 1a0:	8a bb       	out	0x1a, r24	; 26
	PORTB=0;//All initialized to 0
 1a2:	18 ba       	out	0x18, r1	; 24
	PORTA=0;//All initialized to 0
 1a4:	1b ba       	out	0x1b, r1	; 27

	//Timer0 Initialization
	TCCR0=(1<<WGM00)|(1<<WGM01); //FAST PWM mode
 1a6:	88 e4       	ldi	r24, 0x48	; 72
 1a8:	83 bf       	out	0x33, r24	; 51

	TCCR0|=(1<<COM01); // SET 0C0 (293)AT BOTTOM NON INVERTING MODE ...note that OCRO IS CORRECTED TO ENI AND EN2
 1aa:	83 b7       	in	r24, 0x33	; 51
 1ac:	80 62       	ori	r24, 0x20	; 32
 1ae:	83 bf       	out	0x33, r24	; 51

	TCCR0|=(1<<CS01); //PRESCALLER /8
 1b0:	83 b7       	in	r24, 0x33	; 51
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	83 bf       	out	0x33, r24	; 51

	TCNT0=0; //initialize TCNT0
 1b6:	12 be       	out	0x32, r1	; 50
	OCR0 = 0; //initialize duty cycle to 0%
 1b8:	1c be       	out	0x3c, r1	; 60
	//UART initialization

	UCSRB |= (1 << RXEN); //Enable Rx
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8a b9       	out	0x0a, r24	; 10

	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0); //frame is 8 bit, one stop bit
 1c0:	8e e8       	ldi	r24, 0x8E	; 142
 1c2:	80 bd       	out	0x20, r24	; 32

	UCSRC=(1<<UPM1)|(1<<UPM0); //ODD parity ENABLED
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	80 bd       	out	0x20, r24	; 32

	UBRRL = MYUBRR;//Sets BAUDRATE REGISTERS
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	89 b9       	out	0x09, r24	; 9

	UBRRH = (MYUBRR >> 8); //SETS BAUDRATE Registers
 1cc:	10 bc       	out	0x20, r1	; 32
	UCSRB |= (1 << RXCIE); //Enable USART- interrupt
 1ce:	8a b1       	in	r24, 0x0a	; 10
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8a b9       	out	0x0a, r24	; 10

	sei(); // Enable global interrupt
 1d4:	78 94       	sei
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <main+0x40>

000001d8 <__tablejump2__>:
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	05 90       	lpm	r0, Z+
 1de:	f4 91       	lpm	r31, Z
 1e0:	e0 2d       	mov	r30, r0
 1e2:	09 94       	ijmp

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
